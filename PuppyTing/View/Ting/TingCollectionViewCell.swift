//
//  TingCollectionViewCell.swift
//  PuppyTing
//
//  Created by ÍπÄÏäπÌù¨ on 8/27/24.
//
import UIKit

import FirebaseAuth
import RxSwift

class TingCollectionViewCell: UICollectionViewCell {
    static let id = "tingCollectionViewCell"
    
    private let disposeBag = DisposeBag()
    
    var viewController: UIViewController?
    let calendar = Calendar.current
    let currentDate = Date()
    
    //MARK: Ïª¥Ìè¨ÎÑåÌä∏ ÏÑ†Ïñ∏
    private let shadowContainerView: UIView = {
        let view = UIView()
        view.backgroundColor = .white
        view.layer.shadowColor = UIColor.black.cgColor
        view.layer.shadowOpacity = 0.2
        view.layer.shadowOffset = CGSize(width: 0, height: 2)
        view.layer.shadowRadius = 4
        view.layer.cornerRadius = 10
        view.layer.masksToBounds = false
        return view
    }()
    
    private let profilePic: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(named: "defaultProfileImage")
        imageView.contentMode = .scaleAspectFill
        imageView.layer.cornerRadius = 25
        imageView.layer.masksToBounds = true
        imageView.clipsToBounds = true
        return imageView
    }()
    
    private let nameLabel: UILabel = {
        let label = UILabel()
        label.text = "Ïïå Ïàò ÏóÜÎäî ÏÇ¨Ïö©Ïûê"
        label.textColor = .black
        label.font = .systemFont(ofSize: 16, weight: .medium)
        return label
    }()
    
    private let timeLabel: UILabel = {
        let label = UILabel()
        label.text = "nÎ∂Ñ Ï†Ñ"
        label.textColor = .puppyPurple
        label.font = .systemFont(ofSize: 14, weight: .medium)
        return label
    }()
    
    private let footPrintLabel: UILabel = {
        let label = UILabel()
        label.text = "Ïïå Ïàò ÏóÜÏùå"
        label.textColor = .gray
        label.font = .systemFont(ofSize: 13, weight: .medium)
        return label
    }()
    
    private let infoStack: UIStackView = {
        let stack = UIStackView()
        stack.axis = .vertical
        stack.spacing = 5
        return stack
    }()
    
    private let content: UILabel = {
        let label = UILabel()
        let style = NSMutableParagraphStyle()
        style.lineSpacing = 4
        let styleText = NSAttributedString(string:
                                            "Ïò§Îäò Ïñ¥ÎîîÏñ¥ÎîîÏóêÏÑú ÏÇ∞Ï±ÖÌïòÏã§ Î∂Ñ ÏûàÎÇòÏöî? Í≤ΩÎ°úÎäî ÏïÑÏßÅ Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú Ï†ïÌï¥ÏßÄÏßÄ ÏïäÏïòÏßÄÎßå ÎåÄÎûµÏ†ÅÏù∏ Î∞©Ìñ•ÏùÄ Ïû°ÏïÑÎëêÏóàÏäµÎãàÎã§. ÏÇ∞Ï±ÖÏãúÍ∞ÑÏùÄ Ïò§ÌõÑ Îä¶Í≤åÏØ§ÏùÑ ÏÉùÍ∞ÅÌïòÍ≥† ÏûàÏñ¥Ïöî. Ìï®Íªò ÏÇ∞Ï±ÖÌïòÎ©¥ ÎçîÏö± Ï¶êÍ±∞Ïö¥ ÏãúÍ∞ÑÏù¥ Îê† Í≤É Í∞ôÏïÑÏöî! Í∞ïÏïÑÏßÄÏôÄ Ìï®Íªò Í∞ÄÎ≥çÍ≤å ÏÇ∞Ï±ÖÌïòÎ©∞ Ï¢ãÏùÄ ÏãúÍ∞ÑÏùÑ Î≥¥ÎÇ¥Í≥† Ïã∂Îã§Î©¥ Íº≠ Ìï®ÍªòÌï¥ Ï£ºÏÑ∏Ïöî. Ïù¥Îî∞Í∞Ä ÎßåÎÇòÏÑú Ï¶êÍ±∞Ïö¥ ÏãúÍ∞ÑÏùÑ Î≥¥ÎÇ¥Î©¥ Ï¢ãÍ≤†ÏäµÎãàÎã§! ÎÇ†Ïî®ÎèÑ Ï¢ãÏúºÎãà, ÏÇ∞Ï±Ö ÌõÑÏóêÎäî Í∑ºÏ≤ò Ïπ¥ÌéòÏóêÏÑú Ï∞® Ìïú Ïûî ÌïòÎ©∞ Ïâ¨Ïñ¥Í∞ÄÎèÑ Ï¢ãÏùÑ Í≤É Í∞ôÏïÑÏöî."
                                           , attributes: [
                                            .font: UIFont.systemFont(ofSize: 14, weight: .medium),
                                            .paragraphStyle: style])
        label.attributedText = styleText
        label.numberOfLines = 3
        label.textAlignment = .left
        label.lineBreakMode = .byTruncatingTail
//        label.setContentCompressionResistancePriority(.required, for: .vertical)
//        label.setContentHuggingPriority(.required, for: .vertical)
        return label
    }()
    
//    private let mapView: UIImageView = {
//        let map = UIImageView()
//        map.image = UIImage(named: "mapPhoto")
//        return map
//    }()
    
    private let messageSendButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("ÌçºÌîºÌåÖ Î©îÏãúÏßÄ Î≥¥ÎÇ¥Í∏∞ üêæ", for: .normal)
        button.setTitleColor(.white, for: .normal)
        button.titleLabel?.font = .systemFont(ofSize: 16, weight: .heavy)
        button.backgroundColor = .puppyPurple
        button.layer.borderColor = UIColor.gray.cgColor
        button.layer.borderWidth = 1
        button.layer.cornerRadius = 10
        button.layer.shadowColor = UIColor.black.cgColor
        button.layer.shadowOpacity = 0.3
        button.layer.shadowOffset = CGSize(width: 2, height: 2)
        button.layer.shadowRadius = 4
        return button
    }()
    
    private let hidableStack: UIStackView = {
        let stack = UIStackView()
        stack.spacing = 20
        stack.axis = .vertical
        return stack
    }()
    
    //MARK: View ÏÉùÎ™ÖÏ£ºÍ∏∞
    override init(frame: CGRect) {
        super.init(frame: frame)
        setConstraints()
        setLayout()
        addButtonAction()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    //MARK: config Î©îÏÑúÎìú
    func configure(with model: TingFeedModel, currentUserID: String) {
        self.nameLabel.text = "Ïïå Ïàò ÏóÜÎäî ÏÇ¨Ïö©Ïûê"
        self.profilePic.image = UIImage(named: "defaultProfileImage")
        self.content.text = model.content
        self.footPrintLabel.text = "Ïïå Ïàò ÏóÜÏùå"
        messageSendButton.isHidden = model.userid == currentUserID
        
        changeDateFormat(time: model.time)
        
        self.footPrintLabel.text = "Î∞úÎèÑÏû• \(model.postid)Í∞ú üêæ"
        
        FireStoreDatabaseManager.shared.findMemeber(uuid: model.userid)
            .subscribe(onSuccess: { [weak self] member in
                
                self?.nameLabel.text = member.nickname
                self?.footPrintLabel.text = "Î∞úÎèÑÏû• \(member.footPrint)Í∞ú üêæ"
                
                if member.profileImage == "defaultProfileImage" {
                            self?.profilePic.image = UIImage(named: "defaultProfileImage")
                } else {
                    if let profilePic = self?.profilePic {
                        KingFisherManager.shared.loadProfileImage(urlString: member.profileImage, into: profilePic, placeholder: UIImage(named: "defaultProfileImage"))
                    }
                }
            }, onFailure: { error in
                print("Î©§Î≤Ñ Ï∞æÍ∏∞ Ïã§Ìå®: \(error)")
            }).disposed(by: disposeBag)
        writerId = model.userid
        settingData()
    }
    
    var writerId: String? = nil
    let userid = Auth.auth().currentUser?.uid
    var users:[String] = []
    private func settingData() {
        guard let writerId = writerId, let userId = userid else { return }
        users = [userId, writerId]
    }
    
    private func addButtonAction() {
        messageSendButton.addTarget(self, action: #selector(createRoom), for: .touchUpInside)
    }
    
    @objc
    private func createRoom() {
        guard let name = nameLabel.text else { return }
        createChatRoom(chatRoomName: name, users: users)
    }
    
    private func changeDateFormat(time: Date) {
        let dateFormatter = DateFormatter()
        let timeDifference = calendar.dateComponents([.minute, .hour, .day], from: time, to: currentDate)
            
        if let minute = timeDifference.minute, let hour = timeDifference.hour, let day = timeDifference.day {
            if day > 0 {
                dateFormatter.dateFormat = "yyyy-MM-dd"
                self.timeLabel.text = dateFormatter.string(from: time)
            } else if hour > 0 {
                self.timeLabel.text = "\(hour)ÏãúÍ∞Ñ Ï†Ñ"
            } else if minute > 0 {
                self.timeLabel.text = "\(minute)Î∂Ñ Ï†Ñ"
            } else {
                self.timeLabel.text = "Î∞©Í∏à Ï†Ñ"
            }
        }
    }
    
    private func findUserId() -> String {
        guard let user = Auth.auth().currentUser else { return "" }
        return user.uid
    }
    
    private func createChatRoom(chatRoomName: String, users: [String]) {
        FirebaseRealtimeDatabaseManager.shared.checkIfChatRoomExists(userIds: users) { exists, chatId in
            if exists {
                if let roomId = chatId {
                    self.moveChatRoom(roomId: roomId, users: users)
                }
            } else {
                FirebaseRealtimeDatabaseManager.shared.createChatRoom(name: chatRoomName, users: users)
                    .observe(on: MainScheduler.instance).subscribe(onSuccess: { [weak self] roomId in
                    self?.moveChatRoom(roomId: roomId, users: users)
                }).disposed(by: self.disposeBag)
            }
        }
    }
    
    private func moveChatRoom(roomId: String, users: [String]) {
        let chatVC = ChatViewController()
        chatVC.roomId = roomId
        let userId = findUserId()
        let otherUser = users.first == userId ? users.last : users.first
        if let otherUser = otherUser {
            FireStoreDatabaseManager.shared.findMemberNickname(uuid: otherUser) { nickname in
                chatVC.titleText = nickname
                guard let vc = self.viewController else { return }
                vc.navigationController?.pushViewController(chatVC, animated: true)
            }
        }
    }
    
    //MARK: UI Î∞è Ï†úÏïΩÏ°∞Í±¥
    private func setLayout() {
        self.contentView.layer.cornerRadius = 10
        self.contentView.layer.masksToBounds = true
    }
    
    private func setConstraints() {
        [nameLabel,
         timeLabel,
        footPrintLabel].forEach { infoStack.addArrangedSubview($0) }
        
        [content,
         messageSendButton].forEach { hidableStack.addArrangedSubview($0) }
        
        [shadowContainerView, profilePic,
         infoStack,
         hidableStack].forEach { contentView.addSubview($0) }
        
        shadowContainerView.snp.makeConstraints {
            $0.edges.equalToSuperview().inset(5)
        }
        
        profilePic.snp.makeConstraints {
            $0.top.equalToSuperview().offset(30)
            $0.leading.equalToSuperview().offset(20)
            $0.width.height.equalTo(50)
        }
        
        infoStack.snp.makeConstraints {
            $0.leading.equalTo(profilePic.snp.trailing).offset(20)
            $0.centerY.equalTo(profilePic)
        }
        
//        footPrintLabel.snp.makeConstraints {
//            $0.trailing.equalToSuperview().offset(-20)
//            $0.centerY.equalTo(profilePic)
//        }
        
        hidableStack.snp.makeConstraints {
            $0.top.equalTo(infoStack.snp.bottom).offset(20)
            $0.leading.trailing.equalToSuperview().inset(20)
            $0.bottom.equalToSuperview().offset(-20)
        }
        
//        content.snp.makeConstraints {
//            $0.leading.trailing.equalToSuperview().inset(20)
//        }
        
        messageSendButton.snp.makeConstraints {
            // $0.leading.trailing.equalToSuperview().inset(20)
            $0.height.equalTo(44)
        }
    }
}
